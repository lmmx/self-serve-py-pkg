name: Send a repository dispatch event back to the originating template repo

on:
  push:

permissions:
  contents: write

jobs:
  trigger-ci:
    if: ${{ github.repository != 'lmmx/self-serve-py-pkg' }}
    runs-on: ubuntu-latest
    steps:
      - name: Greet
        run: |
          echo "Hello from ${{ github.repository }}"

      - uses: actions/github-script@v6
        id: fetch-repo-and-user-details
        with:
          script: |
            owner = "lmmx"
            ss_repo_name = "self-serve-py-pkg"
            // Fire repository_dispatch event to trigger conformance test
            result = await github.repos.createDispatchEvent({
              owner: owner,
              repo: ss_repo_name,
              event_type: "on-demand-test",
            });
            #query = `POST /repos/${owner}/${ss_repo_name}/dispatches`
            #console.log(query)
            #const variables = {
            #  owner: context.repo.owner,
            #  name: context.repo.repo,
            #  // Note: `event_type` becomes `context.payload.action`
            #  event_type: 'on-demand-test' 
            #}
            #console.log(variables)
            #const result = await github.request(query, variables)
            return result

      #- uses: actions/checkout@v3
      #  with:
      #    fetch-depth: 0
      #    ref: ${{ github.head_ref }}

      #- name: Install cookiecutter
      #  run: pip3 install cookiecutter

      #- name: Rebuild contents using cookiecutter
      #  env:
      #    INFO: ${{ steps.fetch-repo-and-user-details.outputs.result }}
      #  run: |
      #    export REPO_NAME=$(echo $INFO | jq -r '.repository.name')
      #    # Run cookiecutter
      #    pushd /tmp
      #    USER_NAME="$(echo $INFO | jq -r .repository.owner.login)"
      #    # Don't put my email into a package if another user uses this template repo
      #    if [[ $USER_NAME == "lmmx" ]]
      #    then
      #      EMAIL="${{ secrets.EMAIL }}"
      #    else
      #      EMAIL=""
      #    fi
      #    cookiecutter gh:lmmx/py-pkg-cc-template --no-input \
      #      lib_name=$REPO_NAME \
      #      description="$(echo $INFO | jq -r .repository.description)" \
      #      github_username=$USER_NAME \
      #      author_name="$(echo $INFO | jq -r .repository.owner.name)"
      #      email="$EMAIL"
      #      year="$(echo $INFO | jq -r .repository.createdAt | cut -d\- -f 1)"
      #    popd
      #    # Move generated content to root directory of repo
      #    mv /tmp/$REPO_NAME/* .
      #    # Delete the setup.yml workflow (and entire workflows dir), it has served its purpose
      #    rm -rf .github/
      #    # Add .github, .gitignore, .pre-commit-config.yaml, .readthedocs.yml:
      #    mv /tmp/$REPO_NAME/.github/ .
      #    mv /tmp/$REPO_NAME/.gitignore .
      #    mv /tmp/$REPO_NAME/.pre-commit-config.yaml .
      #    mv /tmp/$REPO_NAME/.readthedocs.yml .

      #- name: Force push new repo contents
      #  uses: stefanzweifel/git-auto-commit-action@v4
      #  with:
      #    commit_message: "Initial library structure"
      #    push_options: --force
